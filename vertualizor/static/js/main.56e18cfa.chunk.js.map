{"version":3,"sources":["Components/Post.tsx","API/Get.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Post","props","item","React","useEffect","setAction","action","style","margin","className","contentEditable","suppressContentEditableWarning","content","role","aria-label","onClick","type","like","length","loadTweets","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","message","send","App","useState","state","setstate","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oOA2CeA,MAhCf,SAAcC,GACZ,IAAMC,EAAOD,EAAMC,KAKnB,OAJAC,IAAMC,WAAU,WACdH,EAAMI,UAAU,MACf,CAACJ,EAAMK,SAGR,qBAAKC,MAAO,CAAEC,OAAQ,QAAUC,UAAU,YAA1C,SACE,sBAAKA,UAAU,YAAf,UACE,mBAAGC,iBAAe,EAACC,gCAA8B,EAACF,UAAU,YAA5D,SACGP,EAAKU,UAER,sBAAKH,UAAU,YAAYI,KAAK,QAAQC,aAAW,gBAAnD,UACE,yBACEC,QAAS,kBAAMd,EAAMI,UAAU,SAC/BW,KAAK,SACLP,UAAU,kBAHZ,UAKGP,EAAKe,KAAKC,OALb,kBAOA,wBAAQF,KAAK,SAASP,UAAU,iBAAhC,0BAGA,wBAAQO,KAAK,SAASP,UAAU,kBAAhC,8BCjBKU,MAjBf,SAAoBC,GAClB,IAAMC,EAAM,IAAIC,eAKhBD,EAAIE,aADiB,OAErBF,EAAIG,KALW,MAEH,gCAIZH,EAAII,OAAS,WACXL,EAASC,EAAIK,SAAUL,EAAIM,SAE7BN,EAAIO,QAAU,SAAUC,GACtBC,QAAQC,IAAIF,GACZT,EAAS,CAAEY,QAAS,4BAA8B,MAEpDX,EAAIY,QCaSC,MAxBf,WAAgB,IAAD,EACa/B,IAAMgC,SAAc,IADjC,mBACNC,EADM,KACCC,EADD,OAEelC,IAAMgC,SAAS,IAF9B,mBAEN7B,EAFM,KAEED,EAFF,KAeb,OAZAF,IAAMC,WAAU,WASde,GARmB,SAACO,EAAeC,GACjCG,QAAQC,IAAIL,EAAUC,GAEpBU,EADa,MAAXV,EACOD,EAEA,CAAC,4BAIb,IAGD,qBAAKjB,UAAU,MAAf,SACG2B,EAAME,KAAI,SAACpC,EAAWqC,GAAZ,OACT,cAAC,EAAD,CAAMjC,OAAQA,EAAQD,UAAWA,EAAWH,KAAMA,GAAWqC,SCRtDC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDZ,M","file":"static/js/main.56e18cfa.chunk.js","sourcesContent":["import React from \"react\";\ntype Props = {\n  item: {\n    content: string | null;\n    like: number[];\n    is_retweet: boolean;\n    parent: any;\n  };\n  setAction: any;\n  action: string;\n};\nfunction Post(props: Props) {\n  const item = props.item;\n  React.useEffect(() => {\n    props.setAction(\"\");\n  }, [props.action]);\n\n  return (\n    <div style={{ margin: \"10px\" }} className=\"card w-50\">\n      <div className=\"card-body\">\n        <p contentEditable suppressContentEditableWarning className=\"card-text\">\n          {item.content}\n        </p>\n        <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n          <button\n            onClick={() => props.setAction(\"like\")}\n            type=\"button\"\n            className=\"btn btn-success\"\n          >\n            {item.like.length}üëç\n          </button>\n          <button type=\"button\" className=\"btn btn-danger\">\n            üëé\n          </button>\n          <button type=\"button\" className=\"btn btn-primary\">\n            ReTweet\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Post;\n","function loadTweets(callback: any) {\n  const xhr = new XMLHttpRequest();\n  const method = \"GET\"; // \"POST\"\n  // const url = \"http://127.0.0.1:8000/posts/\";\n  const url = \"http://localhost:8000/posts/\";\n  const responseType = \"json\";\n  xhr.responseType = responseType;\n  xhr.open(method, url);\n  xhr.onload = function () {\n    callback(xhr.response, xhr.status);\n  };\n  xhr.onerror = function (e) {\n    console.log(e);\n    callback({ message: \"The request was an error\" }, 400);\n  };\n  xhr.send();\n}\nexport default loadTweets;\n","import React from \"react\";\nimport \"./App.css\";\nimport Post from \"./Components/Post\";\nimport loadTweets from \"./API/Get\";\nfunction App() {\n  const [state, setstate] = React.useState<any>([]);\n  const [action, setAction] = React.useState(\"\");\n  React.useEffect(() => {\n    const myCallback = (response: any, status: any) => {\n      console.log(response, status);\n      if (status === 200) {\n        setstate(response);\n      } else {\n        setstate([\"There was an error\"]);\n      }\n    };\n    loadTweets(myCallback);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {state.map((item: any, index: number) => (\n        <Post action={action} setAction={setAction} item={item} key={index} />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}